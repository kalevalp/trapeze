service: kinesis-test 


provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  profile: vmware
  environment:
    STAGE: dev




# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  kinesisTest:
    role:
      Fn::GetAtt: [ KinesisTest, Arn ]
    handler: handler.kinesisTest
    environment:
      STREAM_NAME: 'devRetailStream'
      PUT_FROM_PARENT: true

    # events:
    #   - http:
    #       path: event-writer
    #       method: post
    #       cors:
    #         origins:
    #           - '*'
    #         headers:
    #           - Content-Type
    #           - X-Amz-Date
    #           - Authorization
    #           - X-Api-Key
    #           - X-Amz-Security-Token
    #           - X-Amz-User-Agent
    #         allowCredentials: false

resources:
  Resources:
    # Log Group
    KinesisTestLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/kinesis-fork-test
        RetentionInDays: 7

    KinesisTest: # role for the Event Writer Lambda to write to logs and the Kinesis Stream (retailStream)
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: KinesisTestRole1
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ KinesisTestLogGroup, Arn ]
                        - '*'
          - PolicyName: WriteToKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:PutRecord'
                  Resource: arn:aws:kinesis:eu-central-1:946749179653:stream/devRetailStream

  # Outputs:
  #   EventWriterRestApi:
  #     Description: API used to submit producer events to the Kinesis Stream
  #     Value:
  #       Ref: ApiGatewayRestApi
  #     Export:
  #       Name: ${self:custom.eventWriterApi.custom.exportEventWriterRestApi}





#    the following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
